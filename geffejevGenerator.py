import numpy as np 
import itertools

p1 = [1,0,0,1,0]
p2 = [1,0,0,0,0,0,1]
p3 = [1,0,0,0,0,0,0,0,0,1,0]

abeceda = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

def vsiMozniKljuci(dolzina):
    tabela = ["".join(seq) for seq in itertools.product("01", repeat=dolzina)]
    return tabela

def dobiCelotenStringRekurzivno(kriptogram,polinom,trenutniKljuc):
    red = len(polinom)
    celotenNiz = trenutniKljuc
    if(red == 5):
        for i in range(red,len(kriptogram)):
            bit = (int(celotenNiz[i-5]) + int(celotenNiz[i-2]))%2
            bit = str(bit)
            celotenNiz += bit
    if (red == 11):
        for i in range(red,len(kriptogram)):
            bit = (int(celotenNiz[i-11]) + int(celotenNiz[i-2]))%2
            bit = str(bit)
            celotenNiz += bit
    return celotenNiz

def celotenStrinLFSR2(kriptogram, polinom, trenutniKljuc):
    celotenNiz = trenutniKljuc
    for i in range(7, len(kriptogram)): #ker je red 7
        bit = (int(celotenNiz[i-7]) + int(celotenNiz[i-1]))%2
        bit = str(bit)
        celotenNiz += bit
    return celotenNiz


def sestejNiza(c, current):
    vsota = ''
    for i in range(len(c)):
        temp = (int(c[i]) + int(current[i]))%2
        temp = str(temp)
        vsota = vsota + temp
    return vsota

def poglejNeveljavne(besedilo): #po 5 bitov gledas, in kdaj vsota preseze 26
    stevec = 0
    for i in range(0, len(besedilo), 5):
        sum = 0
        niz = ''
        for j in range(i,i+5):
            niz += besedilo[j]
        sum += int(niz, 2)
        if(sum > 25): #torej je znak illegalen
            stevec += 1  
    
    return stevec

def poisciNajmanjIlegalnih(tabela):
    min = 10000000000
    inx  = 0
    for i in range(len(tabela)):
        if(tabela[i] < min):
            min = tabela[i]
            inx  = i
    return inx


def main(kriptogram,red, polinom):
    tabelaNeveljavnih = np.zeros(pow(2,red))
    tabelaKljucev = vsiMozniKljuci(red)
    for i in range(len(tabelaKljucev)): #gres po vseh kljucihft
        currKey = tabelaKljucev[i]
        currNiz = dobiCelotenStringRekurzivno(kriptogram, polinom, currKey)
        sestevek = sestejNiza(kriptogram, currNiz)
        tabelaNeveljavnih[i] = poglejNeveljavne(sestevek)
    
    indeksNajmanjsega = poisciNajmanjIlegalnih(tabelaNeveljavnih)
    potencialniKljuc = tabelaKljucev[indeksNajmanjsega]
    #print(potencialniKljuc)
    return potencialniKljuc

def formulaZ(z1,z2,z3):
    zaporedje = ''
    for i in range(len(z1)):
        temp = (int(z1[i])*int(z2[i]) + int(z2[i])*int(z3[i]) + int(z3[i]))%2
        temp = str(temp)
        zaporedje += temp
    
    return zaporedje
        
def desifrirajBesedilo(kriptogram):
    besedilo = ''
    for i in range(0,len(kriptogram),5):
        niz = ''
        stevilo = 0
        for j in range(i, i+5):
            niz += kriptogram[j]
        stevilo = int(niz,2)
        besedilo += abeceda[stevilo]
    
    return besedilo


def main2(kriptogram, red, zap1, zap3):
    tabelaIlegalnih = np.zeros(pow(2,red))
    tabelaKljucev = vsiMozniKljuci(red)
    for i in range(len(tabelaKljucev)):
        currKey = tabelaKljucev[i]
        currNiz = celotenStrinLFSR2(kriptogram, p2, currKey)
        celotenNiz = formulaZ(zap1, currNiz, zap3)
        sestevek = sestejNiza(kriptogram, celotenNiz)
        tabelaIlegalnih[i] = poglejNeveljavne(sestevek)
        if(tabelaIlegalnih[i] == 0):
            print("Kljuc 2: ", tabelaKljucev[i])
            desifrirano = desifrirajBesedilo(sestevek)
            print("Desifrirano Besedilo: ", desifrirano)
            return tabelaKljucev[i]

    return 0


kript
kljuc1 = main(kript,5,p1)
print("Kljuc 1: ", kljuc1)
kljuc3 = main(kript,11,p3)
print("Kljuc 3: ", kljuc3)
zaporedje1 = dobiCelotenStringRekurzivno(kript, p1, kljuc1)
zaporedje3 = dobiCelotenStringRekurzivno(kript, p3, kljuc3)
kljuc2 = main2(kript, 7, zaporedje1, zaporedje3)
